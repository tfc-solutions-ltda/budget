// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  budgets       Budget[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id        String   @id @default(cuid())
  name      String
  email     String?
  logo      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  budgets   Budget[]
}

model Budget {
  id             String   @id @default(cuid())
  title          String
  clientId       String
  client         Client   @relation(fields: [clientId], references: [id])
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  hourlyRate     Float    @default(100)
  testPercentage Float    @default(30)
  availableHours Int      @default(6)
  estimatedDays  Int
  totalHours     Float
  totalTestHours Float
  totalValue     Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  stories        Story[]
}

model Story {
  id         String     @id @default(cuid())
  title      String
  budgetId   String
  budget     Budget     @relation(fields: [budgetId], references: [id])
  activities Activity[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Activity {
  id          String   @id @default(cuid())
  title       String
  description String?
  hours       Float
  storyId     String
  story       Story    @relation(fields: [storyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Settings {
  id                    Int      @id @default(1)
  defaultHourlyRate     Float    @default(100)
  defaultTestPercentage Float    @default(30)
  defaultAvailableHours Int      @default(6)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
